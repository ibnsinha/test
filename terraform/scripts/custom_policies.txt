#!/bin/bash

# Ensure Terraform is initialized
terraform init -input=false

# Loop through the customer_managed_policies map to generate terraform import commands
for policy_key in $(terraform console -no-color <<EOF
keys(var.customer_managed_policies)
EOF
); do
  # Extract the ARN for the current policy using terraform console
  policy_arn=$(terraform console -no-color <<EOF
var.customer_managed_policies["$policy_key"].arn
EOF
  )

  # Check if policy_arn is empty (error check)
  if [ -z "$policy_arn" ]; then
    echo "Error: ARN for policy $policy_key is empty!"
    continue
  fi

  # Generate terraform import command for each policy
  echo "Importing policy $policy_arn..."
  terraform import aws_iam_policy.customer_managed["$policy_key"] "$policy_arn"
done


==============


#!/bin/bash

# Define the IAM role name
role_name="my-iam-role"

# Check if the role exists (assuming role_exists is a variable that stores true/false)
if [ "$role_exists" == "true" ]; then
  echo "IAM Role $role_name exists. Proceeding with import..."

  # Get the list of attached policy ARNs to the IAM role (if any)
  policy_arns=$(aws iam list-attached-role-policies --role-name "$role_name" | jq -r '.AttachedPolicies[].PolicyArn')

  # Check if there are any attached policies
  if [ -n "$policy_arns" ]; then
    echo "The IAM role has attached policies. Importing role and policies..."

    # Import the IAM role
    terraform import aws_iam_role.my_role_name "$role_name"
    
    # Initialize an index counter for policy imports
    index=0

    # Loop through each policy ARN and import the attached policy
    for policy_arn in $policy_arns; do
      echo "Importing policy attachment: $policy_arn"
      terraform import aws_iam_role_policy_attachment.my_role_policy_attachment["$index"] "$role_name-$policy_arn"
      index=$((index + 1))
    done
  else
    echo "The IAM role has no attached policies. Only importing the IAM role."
    terraform import aws_iam_role.my_role_name "$role_name"
  fi
else
  echo "IAM Role $role_name does not exist. Skipping import."
fi


=============




#!/bin/bash

# Define IAM Role Name
role_name="my-iam-role"

# Fetch attached policy ARNs for the IAM role
policy_arns=$(aws iam list-attached-role-policies --role-name "$role_name" | jq -r '.AttachedPolicies[].PolicyArn')

# Check if any policies are attached
if [ -z "$policy_arns" ]; then
  echo "⚠️ No attached policies found for IAM role '$role_name'."
else
  echo "✅ Found attached policies for IAM role '$role_name'. Importing..."
  
  # Initialize index for Terraform import
  index=0

  # Loop through each policy ARN and import it in Terraform
  for policy_arn in $policy_arns; do
    echo "🔄 Importing policy attachment: $policy_arn"
    
    # Terraform import command
    terraform import aws_iam_role_policy_attachment.customer_policy_attachments["$index"] "$role_name/$policy_arn"

    # Increment index
    index=$((index + 1))
  done

  echo "✅ All attached policies imported successfully!"
fi




=============================

#!/bin/bash

role_name="my-iam-role"

# Fetch only customer-managed policy ARNs
policy_arns=$(aws iam list-attached-role-policies --role-name "$role_name" \
  --query "AttachedPolicies[?starts_with(PolicyArn, 'arn:aws:iam::')].PolicyArn" --output text)

# Check if any customer-managed policies are attached
if [ -z "$policy_arns" ]; then
  echo "⚠️ No customer-managed policies found for IAM role '$role_name'."
else
  echo "✅ Found customer-managed policies for IAM role '$role_name'. Importing..."
  
  index=0
  for policy_arn in $policy_arns; do
    echo "🔄 Importing policy attachment: $policy_arn"
    terraform import aws_iam_role_policy_attachment.customer_policy_attachments["$index"] "$role_name/$policy_arn"
    index=$((index + 1))
  done

  echo "✅ All customer-managed policies imported successfully!"
fi









===========
aws iam list-attached-role-policies --role-name my-iam-role \
  --query "AttachedPolicies[?contains(PolicyArn, 'arn:aws:iam::') && !contains(PolicyArn, 'arn:aws:iam::aws:policy')].PolicyArn" --output text





====================

import boto3
import json
import re

# Initialize AWS IAM client
iam_client = boto3.client('iam')

def read_tfvars(file_path="terraform.tfvars"):
    """Read terraform.tfvars and extract the IAM role name."""
    role_name = None
    with open(file_path, "r") as file:
        for line in file:
            match = re.match(r'^\s*iam_role_name\s*=\s*"([^"]+)"', line)
            if match:
                role_name = match.group(1)
                break
    if not role_name:
        raise ValueError("⚠️ 'iam_role_name' not found in terraform.tfvars.")
    return role_name

def get_customer_managed_policies(role_name):
    """Retrieve only customer-managed policies (exclude AWS-managed ones)."""
    response = iam_client.list_attached_role_policies(RoleName=role_name)
    
    # Extract policy ARNs
    all_policies = response.get('AttachedPolicies', [])
    
    # Filter out AWS-managed policies (those starting with 'arn:aws:iam::aws:policy/')
    customer_managed_policies = [
        policy['PolicyArn'] for policy in all_policies 
        if not policy['PolicyArn'].startswith('arn:aws:iam::aws:policy/')
    ]
    
    return customer_managed_policies

def save_policies_to_file(policies, output_file="custom_policy_arns.json"):
    """Save the extracted policy ARNs to a JSON file."""
    with open(output_file, "w") as file:
        json.dump(policies, file, indent=4)
    print(f"✅ Customer-managed policy ARNs saved to {output_file}")

# Main execution
try:
    role_name = read_tfvars()
    print(f"ℹ️ IAM Role Name Found: {role_name}")

    policies = get_customer_managed_policies(role_name)
    save_policies_to_file(policies)

except Exception as e:
    print(f"❌ Error: {e}")






stages:
  - import

import_policies:
  stage: import
  script:
    - python extract_policies.py  # Run the Python script
    - |
      for policy_arn in $(jq -r '.[]' custom_policy_arns.json); do
        echo "Importing policy: $policy_arn"
        terraform import aws_iam_role_policy_attachment.customer_policy_attachments["$CI_JOB_ID"] "$role_name/$policy_arn"
      done

