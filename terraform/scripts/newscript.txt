#!/bin/bash
set -e  # Exit if any command fails

# Load Terraform variables if the file exists
TFVARS_FILE="terraform/terraform.tfvars"
if [ -f "$TFVARS_FILE" ]; then
    IMPORT_COMPLETED=$(grep '^IMPORT_COMPLETED' "$TFVARS_FILE" | cut -d'=' -f2 | tr -d ' "')
else
    IMPORT_COMPLETED="false"
fi

# üîπ Skip setup if import already completed
if [[ "$IMPORT_COMPLETED" == "true" ]]; then
    echo "‚úÖ Import already completed. Skipping clone & setup."
    exit 0
fi

echo "üöÄ Setting up GitLab pipeline..."

# üîπ Clone ProjectA only if not already cloned
if [ ! -d "projectA" ]; then
    echo "üì• Cloning ProjectA..."
    git clone https://gitlab.com/group/projectA.git
    mv projectA/modules/iam_role modules/iam_role
    rm -rf projectA
fi

# üîπ Run Python script to generate Terraform files
echo "üêç Running Python script to generate Terraform files..."
python3 scripts/generate_iam_role_tf.py

# üîπ Read ROLE_NAME from terraform.tfvars
ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')

# üîπ Read ROLE_EXISTS status
ROLE_EXISTS=$(grep '^ROLE_EXISTS' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')

# üîπ Commit generated Terraform files to ProjectB
echo "üíæ Committing Terraform files to ProjectB..."
git config --global user.email "gitlab-ci@example.com"
git config --global user.name "GitLab CI"
git remote set-url origin https://gitlab.com/group/projectB.git
git add modules/iam_role/*.tf terraform/terraform.tfvars || true
git commit -m "Updating Terraform files with latest IAM role state" || echo "No changes to commit"
git push origin main || echo "Skipping push (no changes or permissions issue)"

# üîπ If IAM Role exists, import it
if [[ "$ROLE_EXISTS" == "FOUND" ]]; then
    echo "‚úÖ Importing IAM Role ${ROLE_NAME}..."
    terraform import module.iam_role.aws_iam_role.${ROLE_NAME} ${ROLE_NAME}
else
    echo "‚ö†Ô∏è IAM Role $ROLE_NAME does not exist. Skipping import."
fi

echo "üéâ Pipeline setup complete!"













===================


#!/bin/bash
set -e  # Exit on error

TFVARS_FILE="terraform/terraform.tfvars"

# üîπ Check if import is already completed
if [ -f "$TFVARS_FILE" ]; then
    IMPORT_COMPLETED=$(grep '^IMPORT_COMPLETED' "$TFVARS_FILE" | cut -d'=' -f2 | tr -d ' "')
else
    IMPORT_COMPLETED="false"
fi

if [[ "$IMPORT_COMPLETED" == "true" ]]; then
    echo "‚úÖ Import already completed. Skipping Terraform file regeneration."
    exit 0
fi

echo "üöÄ Setting up GitLab pipeline..."

# üîπ Run Python script to generate Terraform files
echo "üêç Running Python script to generate Terraform files..."
python3 projectA/scripts/generate_iam_role_tf.py

# üîπ Mark import as completed
echo 'IMPORT_COMPLETED = "true"' >> "$TFVARS_FILE"

# üîπ Commit changes to ProjectB
echo "üíæ Committing Terraform files to ProjectB..."
git config --global user.email "gitlab-ci@example.com"
git config --global user.name "GitLab CI"
git remote set-url origin https://gitlab.com/group/projectB.git
git add modules/iam_role/*.tf terraform/terraform.tfvars || true
git commit -m "Updating Terraform files with latest IAM role state" || echo "No changes to commit"
git push origin main || echo "Skipping push (no changes or permissions issue)"

echo "üéâ Pipeline setup complete!"



===========================


stages:
  - validate
  - setup
  - import
  - apply
  - destroy

validate:
  stage: validate
  script:
    # Check if artifact from previous run exists
    - if [ -f terraform/terraform.tfvars ]; then
        echo "üîç Checking IMPORT_COMPLETED in terraform.tfvars...";
        IMPORT_COMPLETED=$(grep '^IMPORT_COMPLETED' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "');
        if [ "$IMPORT_COMPLETED" == "true" ]; then
          echo "‚úÖ Import already completed. Skipping clone...";
          exit 0;
        fi;
      fi
    - echo "üöÄ Import not completed. Proceeding with cloning ProjectA..."
  artifacts:
    name: "terraform-files-${CI_COMMIT_REF_SLUG}"
    paths:
      - terraform/terraform.tfvars
    expire_in: 30 days
    when: always

setup_pipeline:
  stage: setup
  dependencies:
    - validate  # Ensure we check artifacts before cloning
  script:
    - git clone https://gitlab.com/group/projectA.git
    - mv projectA/modules/iam_role modules/iam_role
    - chmod +x projectA/scripts/setup_pipeline.sh
    - ./projectA/scripts/setup_pipeline.sh
    - rm -rf projectA  # Cleanup after execution
  artifacts:
    name: "terraform-files-${CI_COMMIT_REF_SLUG}"
    paths:
      - modules/
      - terraform/terraform.tfvars
      - iam_role.tf
      - "*.tf"
    expire_in: 30 days
    when: always




======================

validate:
  stage: validate
  script:
    # Check if terraform.tfvars exists and if IMPORT_COMPLETED is set
    - if [ ! -f terraform/terraform.tfvars ] || [ -z "$(grep '^IMPORT_COMPLETED' terraform/terraform.tfvars)" ] || [ "$(grep '^IMPORT_COMPLETED' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')" != "true" ]; then
        echo "‚ö†Ô∏è terraform.tfvars not found or IMPORT_COMPLETED not set! Cloning ProjectA...";
        git clone https://gitlab.com/group/projectA.git;
        mv projectA/terraform/terraform.tfvars terraform/;
        rm -rf projectA;
        echo "üöÄ Import not completed. Proceeding with setup...";
      else
        echo "‚úÖ Import already completed. Skipping setup.";
        exit 0;
      fi
  artifacts:
    name: "terraform-files-${CI_COMMIT_REF_SLUG}"
    paths:
      - terraform/terraform.tfvars
    expire_in: 30 days
    when: always




====================

.setup: &setup |
  echo "üîç Checking for existing artifacts..."
  if [ -f terraform/terraform.tfvars ]; then
    echo "‚úÖ Artifacts found! Using stored files for setup."
  else
    echo "‚ö†Ô∏è No artifacts found! Running fresh setup..."
    git clone https://gitlab.com/group/projectA.git
    mv projectA/modules/iam_role modules/iam_role
    mv projectA/terraform/terraform.tfvars terraform/
    rm -rf projectA
  fi

stages:
  - setup
  - import
  - apply
  - destroy

setup_pipeline:
  stage: setup
  script:
    - *setup  # Calls the setup anchor
  artifacts:
    name: "terraform-files-${CI_COMMIT_REF_SLUG}"
    paths:
      - modules/
      - terraform/terraform.tfvars
      - iam_role.tf
      - "*.tf"
    expire_in: 30 days
    when: always

terraform_apply:
  stage: apply
  dependencies:
    - setup_pipeline
  script:
    - terraform apply -auto-approve

terraform_destroy:
  stage: destroy
  dependencies:
    - setup_pipeline
  script:
    - terraform destroy -auto-approve

