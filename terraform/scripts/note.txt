before_script:
  - echo "üîë Assuming AWS IAM role..."
  - python3 scripts/assume_role.py || { echo "‚ùå Failed to assume role"; exit 1; }
  - echo "‚úÖ Role assumed successfully, loading credentials..."
  - export $(grep -v '^#' /tmp/aws_credentials | xargs)
  - aws sts get-caller-identity  # Confirm authentication (ID will be masked)
  - echo "üöÄ Running Python script to generate Terraform configuration..."
  - python3 scripts/generate_iam_role_tf.py || { echo "‚ùå Failed to generate Terraform configuration"; exit 1; }
  - rm -f /tmp/aws_credentials  # üõë Remove credentials after use



import_instance_profile:
  stage: import
  script:
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi
  when: manual  # Prevent automatic execution





import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Import IAM Role
    - echo "üîÑ Importing IAM Role: ${ROLE_NAME}..."
    - terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME}

    # üîπ Extract Instance Profile Name from main.tf
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")

    # üîπ Import Instance Profile If Found
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi
  when: manual  # Run manually to prevent accidental execution





For any main.tf resources:


import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Import IAM Role
    - echo "üîÑ Importing IAM Role: ${ROLE_NAME}..."
    - terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME}

    # üîπ Extract Instance Profile Name from main.tf and Import If Found
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi

    # üîπ Extract & Import Managed Policies
    - export MANAGED_POLICY_ARNS=$(grep -oP 'arn:aws:iam::\d+:policy/\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $MANAGED_POLICY_ARNS; do
        echo "‚úÖ Importing Managed Policy Attachment: $POLICY";
        terraform import module.iam_role.aws_iam_role_policy_attachment.$POLICY arn:aws:iam::$ACCOUNT_ID:policy/$POLICY;
      done

    # üîπ Extract & Import Inline Policies
    - export INLINE_POLICIES=$(grep -oP 'resource "aws_iam_role_policy" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $INLINE_POLICIES; do
        echo "‚úÖ Importing Inline Policy: $POLICY";
        terraform import module.iam_role.aws_iam_role_policy.$POLICY $ROLE_NAME/$POLICY;
      done

    # üîπ Validate Permissions Boundary (No Separate Import Required)
    - export PERMISSIONS_BOUNDARY=$(grep -oP 'permissions_boundary = "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$PERMISSIONS_BOUNDARY" ]]; then
        echo "‚úÖ Permissions Boundary is set: $PERMISSIONS_BOUNDARY";
      else
        echo "‚ö†Ô∏è No Permissions Boundary found.";
      fi
  when: manual  # Run manually to prevent accidental execution

