before_script:
  - echo "üîë Assuming AWS IAM role..."
  - python3 scripts/assume_role.py || { echo "‚ùå Failed to assume role"; exit 1; }
  - echo "‚úÖ Role assumed successfully, loading credentials..."
  - export $(grep -v '^#' /tmp/aws_credentials | xargs)
  - aws sts get-caller-identity  # Confirm authentication (ID will be masked)
  - echo "üöÄ Running Python script to generate Terraform configuration..."
  - python3 scripts/generate_iam_role_tf.py || { echo "‚ùå Failed to generate Terraform configuration"; exit 1; }
  - rm -f /tmp/aws_credentials  # üõë Remove credentials after use



import_instance_profile:
  stage: import
  script:
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi
  when: manual  # Prevent automatic execution





import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Import IAM Role
    - echo "üîÑ Importing IAM Role: ${ROLE_NAME}..."
    - terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME}

    # üîπ Extract Instance Profile Name from main.tf
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")

    # üîπ Import Instance Profile If Found
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi
  when: manual  # Run manually to prevent accidental execution





For any main.tf resources:


import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Import IAM Role
    - echo "üîÑ Importing IAM Role: ${ROLE_NAME}..."
    - terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME}

    # üîπ Extract Instance Profile Name from main.tf and Import If Found
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        echo "‚úÖ Instance Profile found in main.tf: $INSTANCE_PROFILE_NAME";
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi

    # üîπ Extract & Import Managed Policies
    - export MANAGED_POLICY_ARNS=$(grep -oP 'arn:aws:iam::\d+:policy/\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $MANAGED_POLICY_ARNS; do
        echo "‚úÖ Importing Managed Policy Attachment: $POLICY";
        terraform import module.iam_role.aws_iam_role_policy_attachment.$POLICY arn:aws:iam::$ACCOUNT_ID:policy/$POLICY;
      done

    # üîπ Extract & Import Inline Policies
    - export INLINE_POLICIES=$(grep -oP 'resource "aws_iam_role_policy" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $INLINE_POLICIES; do
        echo "‚úÖ Importing Inline Policy: $POLICY";
        terraform import module.iam_role.aws_iam_role_policy.$POLICY $ROLE_NAME/$POLICY;
      done

    # üîπ Validate Permissions Boundary (No Separate Import Required)
    - export PERMISSIONS_BOUNDARY=$(grep -oP 'permissions_boundary = "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$PERMISSIONS_BOUNDARY" ]]; then
        echo "‚úÖ Permissions Boundary is set: $PERMISSIONS_BOUNDARY";
      else
        echo "‚ö†Ô∏è No Permissions Boundary found.";
      fi
  when: manual  # Run manually to prevent accidental execution





Already imported resources:

import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Check if IAM Role is already imported
    - terraform state list | grep "module.iam_role.aws_iam_role.iam_role" && echo "‚úÖ IAM Role already imported. Skipping..." || terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME}

    # üîπ Extract & Import Instance Profile (If Exists and Not Already Imported)
    - export INSTANCE_PROFILE_NAME=$(grep -oP 'resource "aws_iam_instance_profile" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        terraform state list | grep "module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME" && echo "‚úÖ Instance Profile already imported. Skipping..." ||
        terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi

    # üîπ Extract & Import Managed Policies (If Not Already Imported)
    - export MANAGED_POLICY_ARNS=$(grep -oP 'arn:aws:iam::\d+:policy/\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $MANAGED_POLICY_ARNS; do
        terraform state list | grep "module.iam_role.aws_iam_role_policy_attachment.$POLICY" && echo "‚úÖ Managed Policy $POLICY already imported. Skipping..." ||
        terraform import module.iam_role.aws_iam_role_policy_attachment.$POLICY arn:aws:iam::$ACCOUNT_ID:policy/$POLICY;
      done

    # üîπ Extract & Import Inline Policies (If Not Already Imported)
    - export INLINE_POLICIES=$(grep -oP 'resource "aws_iam_role_policy" "\K[^"]+' modules/iam_role/main.tf || echo "")
    - for POLICY in $INLINE_POLICIES; do
        terraform state list | grep "module.iam_role.aws_iam_role_policy.$POLICY" && echo "‚úÖ Inline Policy $POLICY already imported. Skipping..." ||
        terraform import module.iam_role.aws_iam_role_policy.$POLICY $ROLE_NAME/$POLICY;
      done

  when: manual  # Run manually to prevent accidental execution



In GotLab bash grep -P is not recognized 

import_iam_resources:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"
    
    # üîπ Check & Import IAM Role
    - if terraform state list | grep "module.iam_role.aws_iam_role.iam_role"; then
        echo "‚úÖ IAM Role already imported. Skipping...";
      else
        terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME};
      fi

    # üîπ Extract & Import Instance Profile (If Exists)
    - export INSTANCE_PROFILE_NAME=$(awk -F'"' '/resource "aws_iam_instance_profile"/ {print $2}' modules/iam_role/main.tf || echo "")
    - if [[ -n "$INSTANCE_PROFILE_NAME" ]]; then
        if terraform state list | grep "module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME"; then
          echo "‚úÖ Instance Profile already imported. Skipping...";
        else
          terraform import module.iam_role.aws_iam_instance_profile.$INSTANCE_PROFILE_NAME $INSTANCE_PROFILE_NAME;
        fi
      else
        echo "‚ö†Ô∏è No instance profile found in main.tf. Skipping import.";
      fi
  when: manual  # Prevent automatic execution




or

export INSTANCE_PROFILE_NAME=$(sed -n 's/resource "aws_iam_instance_profile" "\(.*\)"/\1/p' modules/iam_role/main.tf || echo "")




Instance profile tags

import boto3

# Initialize boto3 client for IAM
iam_client = boto3.client('iam')

def get_instance_profile_tags(instance_profile_name):
    """
    Retrieve and print tags associated with the specified IAM instance profile.
    
    :param instance_profile_name: The name of the IAM instance profile
    """
    try:
        response = iam_client.list_instance_profile_tags(InstanceProfileName=instance_profile_name)
        tags = response.get('Tags', [])
        if not tags:
            print(f"No tags found for instance profile '{instance_profile_name}'.")
        else:
            print(f"Tags for instance profile '{instance_profile_name}':")
            for tag in tags:
                print(f"Key: {tag['Key']}, Value: {tag['Value']}")
    except iam_client.exceptions.NoSuchEntityException:
        print(f"The instance profile '{instance_profile_name}' does not exist.")

if __name__ == "__main__":
    # Replace 'YourInstanceProfileName' with the IAM instance profile name you want to query.
    get_instance_profile_tags("YourInstanceProfileName")




Instance profile tag


import boto3
import json
import os
import sys

# Initialize boto3 IAM client
iam_client = boto3.client('iam')

def read_tfvars(file_path):
    """Read terraform.tfvars and extract role_name. Exit if not found."""
    if not os.path.exists(file_path):
        print(f"[ERROR] Required file '{file_path}' not found. Please create it with role_name.")
        sys.exit(1)

    role_name = None
    with open(file_path, "r") as f:
        for line in f:
            if line.startswith("role_name"):
                role_name = line.split("=")[1].strip().replace('"', '')
                break

    if not role_name:
        print(f"[ERROR] 'role_name' is missing in {file_path}. It is a mandatory field.")
        sys.exit(1)

    return role_name

def get_instance_profile(role_name):
    """Fetch Instance Profile associated with the IAM Role"""
    try:
        instance_profiles = iam_client.list_instance_profiles_for_role(RoleName=role_name)
        if instance_profiles['InstanceProfiles']:
            return instance_profiles['InstanceProfiles'][0]['InstanceProfileName']
        return None
    except Exception as e:
        print(f"[WARNING] No Instance Profile found for '{role_name}': {e}")
        return None

def get_instance_profile_tags(instance_profile_name):
    """Fetch Tags for the Instance Profile"""
    try:
        response = iam_client.list_instance_profile_tags(InstanceProfileName=instance_profile_name)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except Exception as e:
        print(f"[WARNING] No Tags found for Instance Profile '{instance_profile_name}': {e}")
        return {}

def generate_terraform(role_name):
    """Generate Terraform Configuration including tags"""
    module_dir = "terraform/modules/iam_role/"
    os.makedirs(module_dir, exist_ok=True)

    # Get Instance Profile
    instance_profile_name = get_instance_profile(role_name)

    # Generate `locals.tf`
    locals_tf = f"""
locals {{
  iam_role_name               = "{role_name}"
"""

    # If Instance Profile exists, use the exact name
    if instance_profile_name:
        locals_tf += f'  iam_instance_profile_name = "{instance_profile_name}"\n'

    locals_tf += "}\n"

    with open(f"{module_dir}/locals.tf", 'w') as f:
        f.write(locals_tf)

    # Generate `main.tf` inside `modules/iam_role/`
    main_tf = f"""
resource "aws_iam_role" "{role_name}" {{
  name               = local.iam_role_name
  assume_role_policy = data.aws_iam_policy_document.instance_assume_role_policy.json
}}

"""

    # **Only create instance profile if it exists**
    if instance_profile_name:
        instance_profile_tags = get_instance_profile_tags(instance_profile_name)

        main_tf += f"""
resource "aws_iam_instance_profile" "{instance_profile_name}" {{
  name = local.iam_instance_profile_name
  role = aws_iam_role.{role_name}.name
"""

        # If tags exist, include them in `main.tf`
        if instance_profile_tags:
            main_tf += "  tags = {\n"
            for key, value in instance_profile_tags.items():
                main_tf += f'    "{key}" = "{value}"\n'
            main_tf += "  }\n"

        main_tf += "}\n"

    with open(f"{module_dir}/main.tf", 'w') as f:
        f.write(main_tf)

    # Generate `iam_role.tf` to call the module
    iam_role_tf = f"""
module "iam_role" {{
  source    = "./modules/iam_role"
  role_name = "{role_name}"
}}
"""
    with open("terraform/iam_role.tf", 'w') as f:
        f.write(iam_role_tf)

if __name__ == "__main__":
    tfvars_path = "terraform/terraform.tfvars"
    role_name = read_tfvars(tfvars_path)
    generate_terraform(role_name)




===================

import boto3
import os

# Initialize boto3 IAM client
iam_client = boto3.client('iam')

def check_iam_role_exists(role_name):
    """Check if IAM Role exists in AWS"""
    try:
        iam_client.get_role(RoleName=role_name)
        return "FOUND"
    except iam_client.exceptions.NoSuchEntityException:
        return "NOT_FOUND"
    except Exception as e:
        print(f"[ERROR] Unexpected error checking IAM Role: {e}")
        return "ERROR"

def main():
    role_name = os.getenv("ROLE_NAME", "").strip()
    if not role_name:
        print("[ERROR] ROLE_NAME is not set. Exiting.")
        exit(1)

    role_status = check_iam_role_exists(role_name)
    
    # Write result to a file for GitLab CI/CD
    with open("role_status.env", "w") as f:
        f.write(f"ROLE_EXISTS={role_status}\n")

    print(f"‚úÖ IAM Role Status: {role_status}")

if __name__ == "__main__":
    main()


================

import_iam_role:
  stage: import
  script:
    - terraform init -input=false
    - export ROLE_NAME=$(grep '^role_name' terraform/terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
    - if [ -z "$ROLE_NAME" ]; then echo "‚ùå ERROR: ROLE_NAME is empty! Check terraform.tfvars"; exit 1; fi
    - echo "‚úÖ ROLE_NAME extracted: ${ROLE_NAME}"

    # üîπ Run Python Script to Check IAM Role and Write Status to File
    - python3 scripts/generate_iam_role_tf.py
    - source role_status.env  # Load ROLE_EXISTS variable

    # üîπ Use ROLE_EXISTS in GitLab Pipeline
    - if [[ "$ROLE_EXISTS" == "NOT_FOUND" ]]; then
        echo "‚ö†Ô∏è IAM Role $ROLE_NAME does not exist. Skipping import.";
      else
        echo "‚úÖ IAM Role $ROLE_NAME exists. Importing...";
        terraform import module.iam_role.aws_iam_role.iam_role ${ROLE_NAME};
      fi
  when: manual  # Prevent automatic execution


================================
def main():
    tfvars_path = "terraform/terraform.tfvars"
    role_name = read_tfvars(tfvars_path)

    # üîπ Check if IAM Role exists and write status to `role_status.env`
    role_status = check_iam_role_exists(role_name)
    with open("role_status.env", "w") as f:
        f.write(f"ROLE_EXISTS={role_status}\n")

    print(f"‚úÖ IAM Role Status: {role_status}")

    # üîπ Generate Terraform only if IAM Role exists
    if role_status == "FOUND":
        generate_terraform(role_name)
    else:
        print(f" IAM Role '{role_name}' does not exist. Skipping Terraform file generation.")

if __name__ == "__main__":
    main()
